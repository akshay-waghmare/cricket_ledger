import express from 'express';
import path from 'path';
import mongoose from 'mongoose';
import MongoStore from 'connect-mongo';
import expressLayouts from 'express-ejs-layouts';
import session from 'express-session';
import passport from 'passport';
import flash from 'connect-flash';
import { CricketLedgerService } from './cricket-ledger-service';
import connectDB from './config/db';
import configurePassport from './config/passport';
import matchRoutes from './routes/match-routes';
import userRoutes from './routes/user-routes';
import betRoutes from './routes/bet-routes';
import dataRoutes from './routes/data-routes';
import authRoutes from './routes/auth-routes';
import { ensureAuthenticated, ensureAdmin } from './middleware/auth';

// Load environment variables
require('dotenv').config();

// Connect to MongoDB
connectDB();

// Initialize our cricket ledger service
const ledgerService = new CricketLedgerService();

// Create some sample data for demo purposes
const setupSampleData = () => {
  try {
    // Create a match
    ledgerService.createMatch('match-001', ['India', 'Australia']);
    ledgerService.createMatch('match-002', ['England', 'South Africa']);
    
    // Add users
    ledgerService.addUser('user-001', 1000);
    ledgerService.addUser('user-002', 2000);
    
    // Add some bets for demo
    ledgerService.addBet('match-001', 'user-001', 'back', 'India', 100, 2.0);
    ledgerService.addBet('match-001', 'user-002', 'lay', 'India', 200, 2.0);
    ledgerService.addBet('match-001', 'user-001', 'back', 'Australia', 50, 3.0);
  } catch (error) {
    // Sample data might already exist, ignore errors
    console.log('Sample data setup:', error instanceof Error ? error.message : 'Error setting up sample data');
  }
};

setupSampleData();

// Create Express app
const app = express();
const port = process.env.PORT || 3000;

// Configure middleware
app.use(expressLayouts);
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));
app.set('layout', 'layout'); // This ensures the layout file is used globally
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// Set up session middleware
app.use(session({
  secret: process.env.SESSION_SECRET || 'cricket-ledger-secret',
  resave: false,
  saveUninitialized: false,
  store: MongoStore.create({ 
    mongoUrl: process.env.MONGO_URI || 'mongodb://localhost:27017/cricket_ledger',
    collectionName: 'sessions'
  }),
  cookie: {
    maxAge: 1000 * 60 * 60 * 24 // 1 day
  }
}));

// Set up flash messages middleware
app.use(flash());

// Initialize passport
app.use(passport.initialize());
app.use(passport.session());
configurePassport();

// Make flash messages available to all views
app.use((req, res, next) => {
  res.locals.success_msg = req.flash('success');
  res.locals.error_msg = req.flash('error');
  res.locals.error = req.flash('error');
  res.locals.user = req.user || null;
  next();
});

// Type declaration for express request with ledger service
declare global {
  namespace Express {
    interface Request {
      ledgerService: CricketLedgerService;
      flash(type: string, message?: any): any;
      logout(cb: (err?: Error) => void): void;
    }
    interface User {
      id: string;
      email: string;
      name: string;
      role: string;
      subscription?: {
        plan: string;
        expiresAt: Date;
      }
    }
  }
}

// Pass the ledger service to routes
app.use((req, res, next) => {
  req.ledgerService = ledgerService;
  next();
});

// Public routes
app.use('/auth', authRoutes);

// Routes that need authentication
app.get('/', ensureAuthenticated, (req, res) => {
  const matches = ledgerService.getAllMatches();
  const users = ledgerService.getAllUsers();
  res.render('index', { 
    matches, 
    users, 
    title: 'Cricket Betting Ledger',
    user: req.user
  });
});

// Mount route modules with authentication
app.use('/matches', ensureAuthenticated, matchRoutes);
app.use('/users', ensureAuthenticated, userRoutes);
app.use('/bets', ensureAuthenticated, betRoutes);
app.use('/data', ensureAuthenticated, ensureAdmin, dataRoutes);

// Error handling middleware
app.use((req, res) => {
  res.status(404).render('error', { 
    message: 'Page not found',
    title: 'Error - Page Not Found'
  });
});

// Start the server
app.listen(port, () => {
  console.log(`Cricket Ledger app listening at http://localhost:${port}`);
});
